// Code generated by pluginator on PatchConfigMap; DO NOT EDIT.
package builtin

import (
	"errors"
	"fmt"
	"regexp"
	"strings"

	"sigs.k8s.io/kustomize/v3/pkg/gvk"
	"sigs.k8s.io/kustomize/v3/pkg/ifc"
	"sigs.k8s.io/kustomize/v3/pkg/resid"
	"sigs.k8s.io/kustomize/v3/pkg/resmap"
	"sigs.k8s.io/kustomize/v3/pkg/transformers"
)

type PatchConfigMapPlugin struct{}

//noinspection GoUnusedGlobalVariable
func NewPatchConfigMapPlugin() *PatchConfigMapPlugin {
	return &PatchConfigMapPlugin{}
}

const preStop = "- name: istio-proxy\n" +
	"    # PATCH #2: Graceful shutdown of the istio-proxy. See https://github.com/istio/istio/issues/7136.\n" +
	"    lifecycle:\n" +
	"      preStop:\n" +
	"        exec:\n" +
	"          command: [\"sh\", \"-c\", 'sleep 20; while [ $(netstat -plunt | grep tcp | grep -v envoy | wc -l | xargs) -ne 0 ]; do sleep 1; done']\n" +
	"    # PATCH #2 ends."

const telemetrySessionAffinity = "\n  # Enable session affinity for Envoy Mixer reports so that calls from a proxy will\n" +
	"  # always target the same Mixer instance.\n" +
	"  sidecarToTelemetrySessionAffinity: true"

func (p *PatchConfigMapPlugin) Config(
	ldr ifc.Loader, rf *resmap.Factory, c []byte) error {
	return nil
}

func (p *PatchConfigMapPlugin) Transform(m resmap.ResMap) error {
	cmGVK := gvk.Gvk{
		Kind:    "ConfigMap",
		Version: "v1",
	}
	// Edit sidecar injector template
	sidecarInjectorCMID := resid.NewResIdWithNamespace(
		cmGVK, "istio-sidecar-injector", "istio-system")
	err := errors.New("cannot find istio-sidecar-injector config map")
	for _, r := range m.Resources() {
		if !sidecarInjectorCMID.Equals(r.OrgId()) {
			continue
		}
		err = transformers.MutateField(
			r.Map(), []string{"data", "config"},
			/* CreateIfNotPresent = */ false,
			p.patchSidecarInjectorTemplate)
	}
	if err != nil {
		return err
	}

	istioCMID := resid.NewResIdWithNamespace(
		cmGVK, "istio", "istio-system")
	err = errors.New("cannot find istio config map")
	for _, r := range m.Resources() {
		if !istioCMID.Equals(r.OrgId()) {
			continue
		}
		err = transformers.MutateField(
			r.Map(), []string{"data", "mesh"},
			/* CreateIfNotPresent = */ false,
			p.patchIstioMeshConfig)
	}
	if err != nil {
		return err
	}

	// add other config map patch
	return nil
}

func (p *PatchConfigMapPlugin) patchSidecarInjectorTemplate(in interface{}) (interface{}, error) {
	if config, ok := in.(string); ok {
		if strings.Contains(config, preStop) {
			return config, nil
		}
		re := regexp.MustCompile(`- name: istio-proxy\n`)
		if m := re.Find([]byte(config)); len(m) == 0 {
			return nil, fmt.Errorf("cannot find `- name: istio-proxy\n` in istio-sidecar-injector template %#v", in)
		}
		return re.ReplaceAllString(config, preStop), nil
	}
	return nil, fmt.Errorf("%#v is expected to be string", in)
}

func (p *PatchConfigMapPlugin) patchIstioMeshConfig(in interface{}) (interface{}, error) {
	if config, ok := in.(string); ok {
		if strings.Contains(config, telemetrySessionAffinity) {
			return config, nil
		}
		config += telemetrySessionAffinity
		return config, nil
	}
	return nil, fmt.Errorf("%#v is expected to be string", in)
}
